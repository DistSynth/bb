// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package js

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 5, 5, 1, 25, 46, 140380400, time.UTC),
		},
		"/js": &vfsgen۰DirInfo{
			name:    "js",
			modTime: time.Date(2019, 5, 5, 1, 25, 46, 319038000, time.UTC),
		},
		"/js/bb.js": &vfsgen۰CompressedFileInfo{
			name:             "bb.js",
			modTime:          time.Date(2021, 1, 12, 23, 25, 9, 888349500, time.UTC),
			uncompressedSize: 4051,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5d\x6b\xe3\x38\x17\xbe\x6e\xa1\xff\xe1\xbc\xb9\x18\xd9\xbc\xc1\x9d\xbd\x6d\xc8\xc2\xa4\xcc\xb2\x03\xcb\x4e\x77\x67\xba\x7b\x11\x4a\x91\xad\x93\x58\x53\x5b\x72\x25\x39\x21\x0c\xf9\xef\x8b\xe4\x0f\xc9\x1f\xa5\x1d\x96\x35\x04\xc7\xf2\xa3\xe7\x7c\x1f\x1d\x5f\x5d\x1e\xa8\x82\xcd\x06\xd6\xf0\xfd\xea\x12\x00\x80\x1b\x2c\xf5\x0d\x7c\x3f\x5f\x5d\x9e\xaf\x2e\xaf\x2e\x37\x9b\x24\x93\x65\x49\x05\xfb\xa3\xc6\x1a\x61\x0d\xbb\x5a\x64\x86\x4b\x01\x51\xdc\x6d\xca\xa4\xd0\xb2\xc0\xa4\x90\xfb\x88\xdc\x36\x70\x68\xf0\x32\xfd\x86\x99\x81\x4c\x21\x35\xc8\x48\xbc\x6a\x76\x58\xb1\x3c\x2b\x99\x86\x35\x6c\x1f\xc2\x45\x7d\x47\x6b\x8d\xcc\x0a\xa2\x85\xc6\xd5\xbc\x1e\x49\xa5\xa4\x91\xe6\x54\xa1\x57\xbd\x90\x94\xdd\x96\x4c\xdf\x04\x2a\x5a\x11\xbd\x9a\xf6\x32\x39\xd7\x49\x27\xd9\xde\x5a\xd9\xe7\x65\x73\xaf\x94\xcc\x50\x0f\x38\xdc\x7e\xcf\x60\xb5\x34\x39\x35\xb0\x76\x64\xab\xe1\x9b\x8c\x16\x45\x4a\xb3\xa7\x79\x47\x75\xd7\xf5\x35\x1c\x73\x14\x60\x72\x84\x9c\x0a\x56\xa0\x02\x4d\x4f\x1a\xb8\x21\x1a\x76\x5c\x70\x9d\x23\x83\x88\x27\x98\x80\xaa\x85\x76\xc8\x8e\x3b\x9e\x90\xfd\x8d\x90\xe5\x98\x3d\xc1\x4e\x2a\x28\xa5\x42\x30\x54\x3f\x69\xe0\x8d\x88\x67\x17\x0a\x1b\x14\xbe\xb3\x0b\x0a\x81\xda\x9f\x38\xc1\x11\x2d\x3f\xd0\x3d\xe5\x62\x48\xcb\x77\x10\x59\x3b\x1b\x6f\x25\x05\x8a\xbd\xc9\xe1\x67\x78\x3f\xb1\xa6\xf1\x2b\x35\x49\xeb\xbc\x28\x5e\x0d\x01\x67\xff\x78\x1e\x85\xa2\xaa\x75\x1e\xf9\xa0\x24\x3a\xe7\x3b\x13\xc5\x4b\x6f\x6c\x10\xa0\x36\x44\xb5\xce\x47\x31\x0e\xe0\xa1\x72\x36\x20\x54\xed\x6d\xa8\x3f\x28\x45\x4f\x3e\x6b\x12\x5d\xf0\x0c\x13\xbb\xab\xd9\xff\x53\x3c\x0a\xa4\x4c\xbf\x3d\x0a\x5a\xda\xfc\x22\x1b\xbe\xff\xaa\x68\xf6\x84\x8a\x8c\x50\x25\x9a\x5c\xb2\x26\x95\xb6\xef\x6d\x22\xfb\xf7\xce\x81\xa7\x0a\xe5\x0e\x8e\x5c\x30\x79\xdc\x76\x9c\x0f\xb0\x5e\xc3\xa2\x16\x0c\x77\x5c\x20\x5b\x4c\x3c\x3a\xc5\x83\xc0\x23\x6c\x36\x89\x69\xf4\x88\xbe\xc3\xbe\x90\x29\x2d\x3e\xbb\xfa\xfa\x9d\x96\x78\xe3\x55\x3e\x87\xc6\x04\x1e\x1f\xd3\x6e\x1b\xf5\x1f\x12\x5a\x55\xc5\x29\x1a\xbf\x5e\x3a\xe7\xc5\x13\xa3\xfa\x1c\x7f\xf7\xae\xb7\xd0\xe7\xfd\x1a\x48\x17\x1b\x12\x4f\x2c\xeb\x70\xd1\x48\x45\x1f\xe4\xae\xdc\x5b\x4b\x07\x85\x24\x2b\x7b\xf7\x15\xed\x12\xa7\x5d\xb4\x8d\x00\x0a\xb9\xbf\xa3\x7b\xbc\x01\xa3\x6a\x5c\x76\xb6\x3b\x98\x46\xf3\x51\xb0\x4a\x72\x61\x5a\x4b\x93\x34\xbd\x57\x45\xa7\x88\xb5\x6c\xcc\x6f\x2f\x5b\x52\x91\xcb\x88\xca\xd8\x82\x9a\xc3\x8c\x75\xd9\xca\xca\xd8\xa0\x85\x8f\xd3\x90\x9c\x27\xc6\xce\xb5\x35\xcd\x0d\x7e\x62\x37\x40\x48\xdb\xa2\x34\x9a\x2f\xed\x9a\xf7\x4c\x83\x9a\xb6\xba\x66\x1d\xd6\x2d\xcd\xa4\x98\x9c\x60\xeb\xb2\xbf\x38\x1e\x43\xc2\x5a\x15\x93\x5a\xc2\x03\x0a\xe3\x73\xd1\x3d\x06\x66\x5d\x5f\x5b\x1f\x8e\x37\x3a\x94\xf5\x7e\x44\x2a\xba\xc7\xc7\x5a\x15\x64\xd9\x28\xb7\x47\x73\x5b\x2b\x85\xc2\xdc\xab\x22\x8a\xe3\x01\xd7\x79\x86\xe2\xa3\xfd\xf3\xf5\x54\x61\xb4\x48\xd3\xc4\xd1\x1d\x38\x1e\x17\xe1\xce\xf0\x30\x72\x1b\xa7\x1d\x64\x20\x77\xd2\xea\x3b\x22\x85\xa6\x56\x02\x98\xcc\xea\xd2\xca\xbf\xff\xf3\xb7\x19\xa2\xb6\x31\x74\xa9\xf5\x22\x9b\xf5\x5f\xad\x8a\xf6\xd4\xb0\xa6\xf7\xd9\x18\x6a\xdf\x0a\xb5\xc8\xff\x03\x31\xc3\xae\x33\x10\xfc\xaa\xc4\x96\xaa\x13\xf7\xd9\xe5\x62\x44\x52\xaa\xf1\x5e\x15\x64\xea\x16\x3d\x4f\x8a\xed\xda\x4c\x72\x4d\x59\x97\xd0\xc3\xe7\x94\x6e\xe0\x21\xbb\xed\x34\x03\xe6\xe6\xdc\xf1\xb5\x94\xe4\x54\x7f\x3e\x8a\x3b\x25\x2b\x54\xe6\xd4\x6c\x98\x54\x5f\x68\x6c\x57\x75\xae\x89\xcd\x94\x5d\x68\xf0\xbc\x42\x4b\x38\xd0\xa2\xc6\xa9\xc5\x03\x6a\x58\x37\xb0\x89\xa1\x19\xbb\x93\xda\x40\xc8\x0a\x8c\x1a\x0a\x8e\xf0\xe2\xc2\xfe\xdc\xb0\x20\x85\xa1\x5c\xa0\x7a\xe4\xb6\x44\x17\x69\x7a\xdb\xad\x2c\x56\x21\x90\xef\x14\x2d\xf1\xb1\xc7\xc3\xda\xa7\xa5\x4d\x85\x02\xed\xdf\xcd\xe9\x13\x8b\x86\xa4\x71\x4f\x63\xdd\x0a\xff\x9b\x32\xb5\x2a\x39\x31\x8c\x1f\x42\xe6\x66\x68\x6b\xc9\x23\x20\x8c\x1f\x48\xcb\x78\xc1\xf8\xc1\x86\xff\x83\x31\x8a\xa7\xb5\xc1\x08\x08\x67\x64\x39\x27\xfd\xa2\x27\x4c\x25\x3b\xd9\xb3\x06\x05\xbb\xcd\x79\xc1\x22\x27\xb1\x45\xfd\x2b\x1b\x47\x21\xb6\x97\x25\x6d\x73\x5f\xa0\xa2\x06\x7f\xe5\x8c\xa1\xf8\xe4\xc4\x44\x13\x47\x2c\xdb\x08\x59\x65\xda\x63\x68\xe5\x5a\x73\xd7\xf4\x66\x07\xc2\x66\x86\x69\x52\x93\xa3\x3b\x83\xce\xab\xe0\x95\x8b\x2b\x21\xe1\x52\xdf\x91\x47\xcb\xb6\x41\x1a\x4d\x96\x40\x5c\x69\x76\x27\x43\xd3\xfb\x66\xce\x85\x3d\x9a\xb7\xd5\x91\x57\xef\xc7\x4b\xc9\xef\x7d\x53\x35\xbd\xb9\x8e\xc6\xbc\x2f\x96\x52\xd8\xf4\x07\x4d\xa9\x5b\x9c\xed\x4a\xd1\xa2\x7f\xbf\x58\x82\xc7\xce\xb5\xa4\xbb\x5e\x95\x37\x75\x52\xaf\xf9\x84\xcc\x4d\x51\x21\x89\xc7\x4e\x27\x8a\x8a\x2a\x5a\xda\x79\xe2\x05\x50\x17\xc2\x97\xa3\xe7\x18\xa6\xe1\x1b\xf8\xc1\x61\x96\x81\x8c\xad\x5b\x79\x78\x7d\x42\xf7\x66\x71\xfd\xe5\xbf\x4e\x35\xd5\x47\x1e\xc6\xe3\xd1\xea\xea\x32\x7a\xe5\x93\x73\xf1\x8b\x92\x25\xec\xf4\x22\xf6\x93\x5c\x3b\x96\xda\x8e\xea\xbe\x1a\x35\xac\xed\x64\xda\xcf\xdc\x64\x72\x38\x3f\xfb\xc1\x26\xfc\xd2\xec\x4f\xe7\x33\x60\xa1\xf1\x47\x77\xd9\xeb\x39\xe9\x3e\x4d\x23\xaf\x4f\x4f\xdb\xb9\xb9\x9d\xbe\x89\x87\x10\x5b\x16\xcf\xab\x97\x5f\x0f\x3e\xb8\xce\xb1\xbb\xfd\x13\x00\x00\xff\xff\x69\x72\x29\x5b\xd3\x0f\x00\x00"),
		},
		"/js/bb.min.js": &vfsgen۰CompressedFileInfo{
			name:             "bb.min.js",
			modTime:          time.Date(2019, 5, 17, 22, 54, 35, 100023700, time.UTC),
			uncompressedSize: 2053,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x4b\x8f\xdb\x36\x17\xdd\xe7\x57\x68\xb8\x10\xc8\x7c\x8c\xe2\xf9\x80\x02\xad\x5d\x2e\xe2\x41\x8a\x0e\x50\x74\xa6\x4d\xa6\x1b\xc3\x28\x24\xf1\x4a\x66\x2b\x91\x02\x79\x65\xc3\x30\xf4\xdf\x0b\x52\x4f\x67\xdc\xb4\xe8\xca\x16\x79\xee\x83\xe7\xdc\xc7\xfb\xb7\x77\x51\xa6\xca\xcc\x1a\x3c\x80\x8d\xee\xbf\x7d\xb7\xfa\xe6\xdd\xff\x57\xf7\xdf\x45\x6f\xdf\xbf\x79\x73\x4c\x6d\xb4\xdd\x8a\x8b\x42\xa8\xdd\xfa\xd2\xf1\xdc\xd4\x75\xaa\xe5\x2f\x2d\xb4\xb0\x2e\x5a\x9d\xa3\x32\x9a\xb2\x4b\x6e\xb4\x33\x15\x24\x95\x29\x29\x79\xe8\x41\x51\x40\x45\x26\xfb\x03\x72\x8c\x72\x0b\x29\x82\x24\xac\xeb\x36\xdb\x6d\xb2\x74\x94\x34\xd6\xa0\xc1\x73\x03\xe2\x52\x99\x54\x3e\xd4\xd2\xcd\xce\x91\x5d\xf0\xa0\x5c\xa2\xf2\x5a\x3a\x81\x1d\x6f\xac\xc9\xc1\xb9\x65\x78\x9f\x27\x0a\x0f\xdb\x04\x6c\xd3\xba\x03\x9d\xad\x12\x77\x50\x05\x52\xc6\x17\x26\xab\xef\x71\xb8\xac\x40\x97\x78\x88\x63\x4c\x06\xcf\x94\x75\xac\xe3\xde\xc7\x22\x0b\x0e\x7d\x18\x2d\x3e\x58\x9b\x9e\xe7\x9c\x13\x57\xa9\x1c\x92\x3c\xad\x2a\x8a\xfc\x9e\x71\x25\xc8\x56\x95\x9f\x6d\x9a\xff\x09\x96\x70\x23\x70\xb7\xda\x6f\x8e\x46\xc9\x68\x25\x84\x38\x29\x2d\xcd\x69\xa7\xf6\x71\x4c\xa7\xff\x42\xc3\x29\xda\x6e\x13\xec\xad\xe8\xa5\xac\x4c\x96\x56\x4f\x81\xbb\x9f\xd3\x1a\xd6\xaa\x63\x8c\x4f\xf8\x9d\xd9\x27\x69\xd3\x54\xe7\xd9\x05\xd7\x8c\x43\x1c\x93\x31\x65\x22\x84\x4f\xcf\x14\x11\xc4\x31\x50\xd6\x75\x7c\x0e\x20\x96\xf4\xaa\xa2\xe7\xca\x34\xfe\xc4\x79\x11\xca\xe7\xb4\x84\xf5\xdd\xaa\xe3\xe1\xc6\x01\x7e\xd4\xb2\x31\x4a\xe3\x10\x30\xc9\xb2\x17\x5b\x31\x8e\xac\x30\x96\x7a\x62\x20\x52\x3a\x42\xb6\xf4\xb4\x83\xbd\xc0\x1d\xec\x97\x91\x97\x62\x3b\x85\xf0\x28\xd7\x84\x70\x07\xf8\xa9\xff\x78\xa5\x7b\x0f\xf2\xc2\x07\x0f\x3e\xb1\xdf\x14\x9c\xae\x80\x21\xfe\xc8\x21\x1c\x41\xe3\x06\x7c\xd2\x94\x34\x69\x09\xbf\xb7\xb6\x22\xfd\x43\x4a\xc0\x87\xd6\x5a\xd0\xf8\x62\x2b\xca\x18\x0f\xb0\x8f\xde\xe2\xf3\xb9\x01\x4a\xb2\x2c\x09\x26\x47\x05\x27\xc2\xf8\xb2\xae\x81\x75\xfc\xca\x7e\x59\x81\x16\xb0\xb5\x3a\x92\x26\x6f\x6b\xd0\x98\xbc\xfc\xfa\x53\x40\x0f\x65\x30\xb2\x77\xc3\x64\xcc\x6b\x22\x98\xfd\x8f\x0c\x5c\x91\xe0\xe2\x5f\xd8\x3e\x05\xbe\x29\xc9\x52\x07\x2f\xb6\x22\xac\xe3\xee\x96\xe1\xc4\xe9\x6b\x13\x8e\xfd\xf3\xfa\xf3\xf5\x57\xea\x23\x39\xa4\xee\xe9\xa4\x9f\xad\x69\xc0\xe2\x99\x22\x63\xcb\x74\x46\xed\x71\x1f\x92\x78\xe5\xcf\x37\xd2\x17\x40\x01\x1d\xcf\xe5\xb3\x71\x78\x43\x55\x92\x65\x0f\x46\x63\xaa\xb4\xef\x26\x2d\x26\x8a\x3d\x35\x15\xf8\xbf\xdb\xf3\xa3\xa4\xc0\x36\xaa\xa0\x77\xba\xb7\x53\x33\xae\x9f\x3c\x03\x94\x12\xa9\x8e\x84\x6d\x94\xe7\xe0\x03\xa2\x55\x59\x8b\x40\x89\x92\x84\x03\xe3\x93\x51\x66\xe4\xd9\x77\x18\x68\xf9\x70\x50\x95\xa4\x8a\x7d\x35\x76\x37\x48\xa1\xc1\xa6\x08\x3f\x2a\x29\x41\x3f\x16\x36\xad\x81\x6a\x4f\x6d\x68\x81\x50\x99\x62\x21\x63\x3f\xac\x7a\x22\x15\x38\x71\x19\xfa\x4d\x49\x41\x86\x8a\x1d\xca\x7f\xfa\xf4\x45\x8d\x8e\x70\xe2\x45\x1e\x7d\x2e\x9b\xaa\x04\xbc\xa9\xde\x1c\xe6\x1f\x04\x9c\x81\xa3\x86\xb7\xd4\xbb\x42\x79\x01\x97\x7d\x74\xb3\xe2\x28\x81\xf1\x7e\xaa\xb6\xe7\xc9\xcb\xdf\x55\xf7\x1c\xa7\xe3\x61\xe2\x5d\xf9\xf6\xc3\xa7\x49\x6d\x5a\x0f\xc3\xe7\xcb\xa7\x85\x3b\x16\xc7\x53\x0e\xe1\x80\xe3\x2e\xfc\xee\x59\xc7\x95\xfb\xf4\xdf\x09\xbb\x5b\x75\xdd\x72\xa9\xa8\x82\x5e\x6d\xc2\x1f\xac\xa9\xa3\xc2\x11\xc6\x49\xab\x25\x14\x4a\x83\x9c\xe7\xb2\x2f\xec\xb0\x05\x1d\xeb\x17\xd8\x30\xc0\x96\xbb\x71\x03\x95\x03\x7a\xf3\x8a\x25\xe3\xb2\xa4\x0b\x4f\x9b\x69\x3e\x8f\x47\x02\xf9\xab\xb3\xc5\xaa\xa3\x6c\xf3\x57\x00\x00\x00\xff\xff\x7e\x99\xa8\x21\x05\x08\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/js"].(os.FileInfo),
	}
	fs["/js"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/js/bb.js"].(os.FileInfo),
		fs["/js/bb.min.js"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
